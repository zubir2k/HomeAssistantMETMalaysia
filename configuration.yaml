#################################################
## Weather Forecast from Official MET Malaysia ##
#################################################
## Available range: Today, Yesterday & Tomorrow forecast.
## You are free to do whatever automation from these sensors.
##
## IMPORTANT:
## 1. The sensors are based on command line platform using cURL command.
## 2. Please obtain your METToken and replace it in line 19 from https://api.met.gov.my/
## 3. Change the location code in line 19 (look for LOCATION:288) to your desired location.
## 4. You may refer the location codes table for references.

sensor:
  ## Weather Forecast by MET Malaysia ##
  - platform: command_line
    name: MET Malaysia
    json_attributes:
      - metadata
      - results
    command: 'curl -H "Authorization: METToken 1234567890abcdefghijklmnopqrstuvwxyz1234" "https://api.met.gov.my/v2.1/data?datasetid=FORECAST&datacategoryid=GENERAL&locationid=LOCATION:288&start_date={{ (now().date() + timedelta(days=-1)) }}&end_date={{ (now().date() + timedelta(days=1)) }}"'
    scan_interval: 7200 #2hours interval in second format. Reducing the interval may get you throttled (https://api.met.gov.my/dashboard/docs#throttle). 
    value_template: "{{ value_json.results[1].locationname }}, {{ value_json.results[1].locationrootname }}"

  ## MET Malaysia Scrape Sensors ##
  - platform: scrape
    name: metmalaysia_scrape
    resource: https://www.met.gov.my/home?lang=en
    scan_interval: 1800
    select: ".metkola"
    headers:
      User-Agent: Mozilla/5.0

  - platform: template
    sensors:
        metmalaysia_humidity:
          friendly_name: "Humidity"
          value_template: >-
            {% set regex_humidity='Humidity\s*([$%]+|\S+)%' %}
            {{ states("sensor.metmalaysia_scrape") | regex_findall_index(regex_humidity) }}
          device_class: humidity
          unit_of_measurement: "%"
        metmalaysia_now:
            friendly_name: "Current Weather"
            icon_template: >-
              {% if as_timestamp(now()) | timestamp_custom('%H') | int < 12 %}{{state_attr("sensor.metmalaysia_fgm", "icon")}}
              {% elif as_timestamp(now()) | timestamp_custom('%H') | int < 18 %}{{state_attr("sensor.metmalaysia_fga", "icon")}}
              {% else %}{{state_attr("sensor.metmalaysia_fgn", "icon")}}
              {% endif %}
            value_template: >-
              {% if as_timestamp(now()) | timestamp_custom('%H') | int < 12 %}{{states.sensor.metmalaysia_fgm.state}}
              {% elif as_timestamp(now()) | timestamp_custom('%H') | int < 18 %}{{states.sensor.metmalaysia_fga.state}}
              {% else %}{{states.sensor.metmalaysia_fgn.state}}
              {% endif %}
            attribute_templates: 
              condition: >-
                {% if as_timestamp(now()) | timestamp_custom('%H') | int < 12 %}{{state_attr("sensor.metmalaysia_fgm", "condition")}}
                {% elif as_timestamp(now()) | timestamp_custom('%H') | int < 18 %}{{state_attr("sensor.metmalaysia_fga", "condition")}}
                {% else %}{{state_attr("sensor.metmalaysia_fgn", "condition")}}
                {% endif %}
              forecast: >-
                {% set forecast_json = {"datetime": now().date() ~ 'T00:00:00+00:00',"condition": state_attr('sensor.metmalaysia_fgm', 'condition'),"temperature": states.sensor.metmalaysia_fmaxt.state|float,"templow": states.sensor.metmalaysia_fmint.state|float},{"datetime": now().date() ~ 'T12:00:00+00:00',"condition": state_attr('sensor.metmalaysia_fga', 'condition'),"temperature": states.sensor.metmalaysia_fmaxt.state|float,"templow": states.sensor.metmalaysia_fmint.state|float},{"datetime": now().date() ~ 'T20:00:00+00:00',"condition": state_attr('sensor.metmalaysia_fgn', 'condition'),"temperature": states.sensor.metmalaysia_fmaxt.state|float,"templow": states.sensor.metmalaysia_fmint.state|float} %}
                {{ forecast_json }}
        metmalaysia_fgm:
            friendly_name: "Morning Forecast"
            icon_template: >-
              {% if states.sensor.metmalaysia_fgm.state == "Thunderstorms" or states.sensor.metmalaysia_fgm.state == "Rain" %}mdi:weather-pouring
              {% else %}mdi:weather-cloudy
              {% endif %}
            value_template: >-
              {% for x in range(18) -%}
              {% if now().strftime("%Y-%m-%d") == as_datetime(state_attr("sensor.met_malaysia", "results")[x].date).strftime("%Y-%m-%d") and state_attr("sensor.met_malaysia", "results")[x].datatype == 'FGM' %}{{ state_attr("sensor.met_malaysia", "results")[x].value }}
              {% endif -%}
              {% endfor %}
            attribute_templates: 
              condition: '{%if states.sensor.metmalaysia_fgm.state == "No Rain" or states.sensor.metmalaysia_fgm.state == "no rain"%}sunny{%elif states.sensor.metmalaysia_fgm.state == "Rain"%}rainy{%elif states.sensor.metmalaysia_fgm.state == "Thunderstorms"%}lightning{%else %}partlycloudy{% endif %}'
        metmalaysia_fga:
            friendly_name: "Afternoon Forecast"
            icon_template: >-
              {% if states.sensor.metmalaysia_fga.state == "Thunderstorms" or states.sensor.metmalaysia_fga.state == "Rain" %}mdi:weather-pouring
              {% else %}mdi:weather-partly-cloudy
              {% endif %}
            value_template: >-
              {% for x in range(18) -%}
              {% if now().strftime("%Y-%m-%d") == as_datetime(state_attr("sensor.met_malaysia", "results")[x].date).strftime("%Y-%m-%d") and state_attr("sensor.met_malaysia", "results")[x].datatype == 'FGA' %}{{ state_attr("sensor.met_malaysia", "results")[x].value }}
              {% endif -%}
              {% endfor %}
            attribute_templates: 
              condition: '{%if states.sensor.metmalaysia_fga.state == "No Rain" or states.sensor.metmalaysia_fga.state == "no rain"%}sunny{%elif states.sensor.metmalaysia_fga.state == "Rain"%}rainy{%elif states.sensor.metmalaysia_fga.state == "Thunderstorms"%}lightning{%else %}partlycloudy{% endif %}'
        metmalaysia_fgn:
            friendly_name: "Night Forecast"
            icon_template: >-
              {% if states.sensor.metmalaysia_fgn.state == "Thunderstorms" or states.sensor.metmalaysia_fgn.state == "Rain" %}mdi:weather-pouring
              {% else %}mdi:weather-night-partly-cloudy
              {% endif %}
            value_template: >-
              {% for x in range(18) -%}
              {% if now().strftime("%Y-%m-%d") == as_datetime(state_attr("sensor.met_malaysia", "results")[x].date).strftime("%Y-%m-%d") and state_attr("sensor.met_malaysia", "results")[x].datatype == 'FGN' %}{{ state_attr("sensor.met_malaysia", "results")[x].value }}
              {% endif -%}
              {% endfor %}
            attribute_templates: 
              condition: '{%if states.sensor.metmalaysia_fgn.state == "No Rain" or states.sensor.metmalaysia_fgn.state == "no rain"%}sunny{%elif states.sensor.metmalaysia_fgn.state == "Rain"%}rainy{%elif states.sensor.metmalaysia_fgn.state == "Thunderstorms"%}lightning{%else %}partlycloudy{% endif %}'
        metmalaysia_fmint:
            friendly_name: "Minimum Temperature"
            icon_template: mdi:thermometer
            value_template: >-
              {% for x in range(18) -%}
              {% if now().strftime("%Y-%m-%d") == as_datetime(state_attr("sensor.met_malaysia", "results")[x].date).strftime("%Y-%m-%d") and state_attr("sensor.met_malaysia", "results")[x].datatype == 'FMINT' %}{{ state_attr("sensor.met_malaysia", "results")[x].value }}
              {% endif -%}
              {% endfor %}
            unit_of_measurement: "°C"
        metmalaysia_fmaxt:
            friendly_name: "Maximum Temperature"
            icon_template: mdi:thermometer
            value_template: >-
              {% for x in range(18) -%}
              {% if now().strftime("%Y-%m-%d") == as_datetime(state_attr("sensor.met_malaysia", "results")[x].date).strftime("%Y-%m-%d") and state_attr("sensor.met_malaysia", "results")[x].datatype == 'FMAXT' %}{{ state_attr("sensor.met_malaysia", "results")[x].value }}
              {% endif -%}
              {% endfor %}
            unit_of_measurement: "°C"
        metmalaysia_fsigw:
            friendly_name: "Today Forecast"
            icon_template: mdi:calendar-check
            value_template: >-
              {% for x in range(18) -%}
              {% if now().strftime("%Y-%m-%d") == as_datetime(state_attr("sensor.met_malaysia", "results")[x].date).strftime("%Y-%m-%d") and state_attr("sensor.met_malaysia", "results")[x].datatype == 'FSIGW' %}{{ state_attr("sensor.met_malaysia", "results")[x].value }}
              {% endif -%}
              {% endfor %}
            attribute_templates: 
              when: >-
                {% for x in range(18) -%}
                {% if now().strftime("%Y-%m-%d") == as_datetime(state_attr("sensor.met_malaysia", "results")[x].date).strftime("%Y-%m-%d") and state_attr("sensor.met_malaysia", "results")[x].datatype == 'FSIGW' %}{{ state_attr("sensor.met_malaysia", "results")[x].attributes.when }}
                {% endif -%}
                {% endfor %}
        metmalaysia_fsigw_tomorrow:
            friendly_name: "Tomorrow Forecast"
            icon_template: mdi:calendar-month
            value_template: >-
              {% for x in range(18) -%}
              {% if (now() + timedelta(days=1)).strftime("%Y-%m-%d") == as_datetime(state_attr("sensor.met_malaysia", "results")[x].date).strftime("%Y-%m-%d") and state_attr("sensor.met_malaysia", "results")[x].datatype == 'FSIGW' %}{{ state_attr("sensor.met_malaysia", "results")[x].value }}
              {% endif -%}
              {% endfor %}
            attribute_templates: 
              when: >-
                {% for x in range(18) -%}
                {% if (now() + timedelta(days=1)).strftime("%Y-%m-%d") == as_datetime(state_attr("sensor.met_malaysia", "results")[x].date).strftime("%Y-%m-%d") and state_attr("sensor.met_malaysia", "results")[x].datatype == 'FSIGW' %}{{ state_attr("sensor.met_malaysia", "results")[x].attributes.when }}
                {% endif -%}
                {% endfor %}
        metmalaysia_fsigw_yesterday:
            friendly_name: "Yesterday Forecast"
            icon_template: mdi:calendar-month-outline
            value_template: >-
              {% for x in range(18) -%}
              {% if (now() + timedelta(days=-1)).strftime("%Y-%m-%d") == as_datetime(state_attr("sensor.met_malaysia", "results")[x].date).strftime("%Y-%m-%d") and state_attr("sensor.met_malaysia", "results")[x].datatype == 'FSIGW' %}{{ state_attr("sensor.met_malaysia", "results")[x].value }}
              {% endif -%}
              {% endfor %}
            attribute_templates: 
              when: >-
                {% for x in range(18) -%}
                {% if (now() + timedelta(days=-1)).strftime("%Y-%m-%d") == as_datetime(state_attr("sensor.met_malaysia", "results")[x].date).strftime("%Y-%m-%d") and state_attr("sensor.met_malaysia", "results")[x].datatype == 'FSIGW' %}{{ state_attr("sensor.met_malaysia", "results")[x].attributes.when }}
                {% endif -%}
                {% endfor %}

weather:
  - platform: template
    name: "MET Malaysia"
    attribution_template: "Customized by Home Assistant Malaysia. Data provided by MET Malaysia"
    condition_template: "{{ state_attr('sensor.metmalaysia_now', 'condition') }}"
    temperature_template: "{{ states('sensor.metmalaysia_fmaxt') | float }}"
    humidity_template: "{{ states('sensor.metmalaysia_humidity') | float }}"
    forecast_template: "{{ state_attr('sensor.metmalaysia_now', 'forecast') }}"
    
